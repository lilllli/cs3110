(* Lily Chen (qc53) and Charles Tark (cyt25) *)

Problem 1: Semantics
--------------------

/Exercise 1/
OCaml if statements with int as guard:
a.) Syntax: if e0 then e1 else e2
Type-checking rule: if e0 has type int, and for some type t,
	both e1 and e2 have type t,	then
	(if e0 then e1 else e2) has type t
b.) 'a -> 'a -> int
c.) Evaluation rule:
if env :: e0 --> v0 > 0 and if env :: e1 --> v1 then
env :: (if e0 then e1 else e2) --> v1
if env :: e0 --> v0 = 0 and if env :: e2 --> v2 then
env :: (if e0 then e1 else e2) --> v2
d.) match e0 > 0 with
	  true -> e0
	  | _ -> e2

/Exercise 2/
let x = 1 in
let f = fun y ->
( let x = y +1 in
fun z -> x + y + z ) in
let x = 3 in
let g = f 4 in
let y = 5 in
let z = g 6 in
z
-->
15

The first let binds x to 1, creating environment {x=1}
The second let binds f to <<fun y -> (let x = y + 1 in fun z -> x + y + z), {x=1}>>,
	creating environment {x=1, f=<<fun y -> (let x = y + 1 in fun z -> x + y + z), {x=1}>>}
That inner let binds x to y+1, creating environment {x=y+1}
So our current environment is {x=1, f=<<fun y -> (<<fun z-> x + y + z, {x=y+1}>>), {x=1}>>}
The next let binds x to 3, shadowing the previous binding, and creating environment
	{x=3, f=<<fun y -> (<<fun z-> x + y + z, {x=y+1}>>), {x=1}>>}
The next let binds g to f 4, which is a function application of f with the argument 4:
	this evaluates to the closure <<fun y -> (<<fun z-> x + y + z, {x=y+1}>>), {x=1}>>
Applying this closure to 4 creates an environment {y=4, x=1}. The function body 
	fun z-> y + 1 + y + z is evaluated in that environment
The variable name y evaluates to 4 and so the expression evaluates to 9 + z
Thus, g is bound to 9 + z and our environment is now
	{g=9+z, x=3, f=<<fun y -> (<<fun z-> x + y + z, {x=y+1}>>), {x=1}>>}
The next let binds y to 5:
	{y=5, g=9+z, x=3, f=<<fun y -> (<<fun z-> x + y + z, {x=y+1}>>), {x=1}>>}
The variable z is bound to g 6, which is a function application of g with the argument 6:
	this evaluates to the closure <<9+z>>
Applying this closure to 6 creates an environment {z=6}. The function body 9+z is evaluated
	in that environment
The variable name z evaluates to 6 and so 9 + z evaluates to 15
The variable z is bound to 15:
	{z=15, y=5, g=9+z, x=3, f=<<fun y -> (<<fun z-> x + y + z, {x=y+1}>>), {x=1}>>}
The variable z has a value and has already been bound to 15
So the entire expression evaluates to 15.

Problem 4: Summary
------------------
This problem set was the most challenging in terms of time resources. Due to the heavy load of other classes and exams, we found it especially difficult to dedicate the appropriate time. The problems were slightly more challenging but nothing impossible so if we were able to manage ourselves a little better, we probably would have fully finished everything.
Problem 1: Charlie
Problem 2: Lillian
Problem 3: Both